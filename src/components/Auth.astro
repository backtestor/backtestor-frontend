---
import PMenu from "@components/generic/PMenu.astro";
import PSvg from "@components/generic/PSvg.astro";
import { t } from "i18next";
---

<!-- Auth Component -->
<button class="btn btn-outline" id="sign-in-button" type="button">{t("components.auth.sign-in")}</button>
<PMenu>
  <button
    slot="menu-heading"
    type="button"
    id="profile-menu"
    class="btn btn-ghost btn-square hidden"
    tabindex="0"
    title="Profile"
    aria-label="Profile"
  >
    <PSvg name="profile" svgClass="h-10" />
  </button>
  <div slot="menu-content" role="menu" class="bg-base-200 ltr:right-0 rtl:left-0" aria-labelledby="profile-menu">
    <ul>
      <li><a role="menuitem" href="/">Item 1</a></li>
      <li><a role="menuitem" href="/">Item 2</a></li>
    </ul>
  </div>
</PMenu>

<script>
  import { AuthOptions } from "@services/auth/auth";
  import { AuthConstants, OIDC_SCOPES } from "@services/auth/constants";
  import { defineMsaAuth, msaAuthOptions } from "@services/auth/msaAuth";
  import { AuthCodeRequest } from "@services/auth/request";
  import { LogLevel, defineConsoleLogger, mapStringToLogLevel } from "@services/logger/logger";
  import { AppStore, appStore } from "@services/stores/appStore";

  const headerComponent = "headerComponent";
  const signInButton = document.getElementById("sign-in-button") as HTMLElement;

  const loggerLevelString: string = import.meta.env.PUBLIC_LOG_LEVEL;
  const loggerLevel: LogLevel = mapStringToLogLevel(loggerLevelString);
  const logger = defineConsoleLogger(loggerLevel, AuthConstants.PACKAGE_NAME);

  // Functions
  const signInMsa = function signInMsa(): void {
    const options: AuthOptions = {
      ...msaAuthOptions,
      logger: logger,
    };
    const auth = defineMsaAuth(options);
    const request: AuthCodeRequest = {
      scope: OIDC_SCOPES,
    };
    auth.getAuthCode(request);
  };

  // Elements Update
  const updateAuthElements = function updateSpeedLimitElements(): void {
    // Intended.
  };

  // View Update
  const initView = function initView(): void {
    // Intended.
  };

  const updateLoginView = function updateLoginView(newKey: string): void {
    console.log(`updateLoginView: ${newKey}`);
  };

  // State Update

  // Events
  const onClickSignInMsa = function onClickSignInMsa(event: Event): void {
    if (!event.currentTarget) return;

    signInMsa();
  };

  const onChangeAppStore = function onChangeAppStore(
    key: keyof AppStore,
    value: AppStore[keyof AppStore] | undefined,
    source?: string,
  ): void {
    if (source === headerComponent || typeof value === "undefined") return;

    if (key === "jwtToken") {
      const newValue: string = value.toString();
      updateLoginView(newValue);
    }
  };

  // Init
  initView();
  updateAuthElements();

  signInButton.addEventListener("click", onClickSignInMsa, { passive: true });

  appStore.listen(onChangeAppStore);
</script>
