---
import PSvg from "@src/components/generic/PSvg.astro";
import { changeLanguage, t } from "i18next";
import { addTrailingSlash } from "@src/i18n";
import { localizePath } from "astro-i18next";

changeLanguage("en");
---

<header class="flex flex-col items-center justify-center">
  <a href={addTrailingSlash(localizePath("/"))} title={t("pages.index.tooltip")}>
    <PSvg name="bt" svgClass="h-40" />
  </a>
  <h1 id="authenticating">{t("components.auth.auth-response.authenticating")}</h1>
  <h1 id="authentication-succeed" hidden>{t("components.auth.auth-response.authentication-succeed")}</h1>
  <h1 id="authentication-failed" hidden>{t("components.auth.auth-response.authentication-failed")}</h1>
  <p id="error" hidden>...</p>
  <p id="error-code" hidden>...</p>
  <p id="error-description" hidden>...</p>
  <p id="timestamp" hidden>...</p>
  <p id="correlation-id" hidden>...</p>
</header>

<script>
  import { ApiResponse } from "@src/services/api";
  import { TokenApiRequest } from "@src/services/api/auth";
  import { msaAuth } from "@src/services/app/auth";
  import { authApi } from "@src/services/app/authApi";
  import { AuthResponse, TokenResponse } from "@src/services/auth";
  import { authLocalStore } from "@src/services/auth/authStore";
  import { generateGuid } from "@src/utils/uuid";

  const authenticating = document.getElementById("authenticating") as HTMLElement;
  const authenticationSucceed = document.getElementById("authentication-succeed") as HTMLElement;
  const authenticationFailed = document.getElementById("authentication-failed") as HTMLElement;
  const errorElement = document.getElementById("error") as HTMLElement;
  const errorCodeElement = document.getElementById("error-code") as HTMLElement;
  const errorDescriptionElement = document.getElementById("error-description") as HTMLElement;
  const timestampElement = document.getElementById("timestamp") as HTMLElement;
  const correlationIdElement = document.getElementById("correlation-id") as HTMLElement;

  // Functions
  const showError = function showError(
    error?: string | null,
    errorCode?: string | null,
    errorDescription?: string | null,
    timestamp?: string | null,
    correlationId?: string | null,
  ): void {
    authenticating.hidden = true;
    authenticationSucceed.hidden = true;
    authenticationFailed.hidden = false;

    errorElement.innerText = `${error}`;
    errorCodeElement.innerText = `${errorCode}`;
    errorDescriptionElement.innerText = `${errorDescription}`;
    timestampElement.innerText = `${timestamp}`;
    correlationIdElement.innerText = `${correlationId}`;

    errorElement.hidden = typeof error !== "string";
    errorCodeElement.hidden = typeof errorCode !== "string";
    errorDescriptionElement.hidden = typeof errorDescription !== "string";
    timestampElement.hidden = typeof timestamp !== "string";
    correlationIdElement.hidden = typeof correlationId !== "string";
  };

  const handleAuthRedirectResponse = async function handleAuthRedirectResponse(): Promise<void> {
    const authResponse: AuthResponse = await msaAuth.handleAuthCodeResponse();
    if (authResponse.error) {
      showError(
        authResponse.error,
        authResponse.errorCode,
        authResponse.errorDescription,
        authResponse.timestamp,
        authResponse.correlationId,
      );
      return;
    }

    const tokenResponse: TokenResponse = authResponse as TokenResponse;
    await getApiToken(tokenResponse);
  };

  const getApiToken = async function getApiToken(tokenResponse: TokenResponse): Promise<void> {
    const tokenRequest: TokenApiRequest = {
      sessionId: tokenResponse.sessionId as string,
      correlationId: tokenResponse.correlationId as string,
      requestId: generateGuid(),
      idToken: tokenResponse.idToken as string,
    };
    const apiresponse: ApiResponse = await authApi.getToken(tokenRequest);
    if (apiresponse.error) {
      showError(apiresponse.error.message, null, null, apiresponse.executedAtUtc, apiresponse.correlationId);
      return;
    }

    authenticating.hidden = true;
    authenticationSucceed.hidden = false;
    authenticationFailed.hidden = true;

    if (tokenResponse?.stateObject?.redirectStartPage && !authLocalStore.value.debugDoNotRedirectAfterSigninCallback)
      window.location.assign(tokenResponse.stateObject.redirectStartPage);
  };

  // Init
  handleAuthRedirectResponse();
</script>
