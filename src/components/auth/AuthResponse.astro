---
import PSvg from "@src/components/generic/PSvg.astro";
import { changeLanguage, t } from "i18next";
import { addTrailingSlash } from "@src/i18n";
import { localizePath } from "astro-i18next";

changeLanguage("en");
---

<header class="flex flex-col items-center justify-center">
  <a href={addTrailingSlash(localizePath("/"))} title={t("pages.index.tooltip")}>
    <PSvg name="bt" svgClass="h-40" />
  </a>
  <h1 id="authenticating">{t("components.auth.auth-response.authenticating")}</h1>
  <h1 id="authentication-succeed" hidden>{t("components.auth.auth-response.authentication-succeed")}</h1>
  <h1 id="authentication-failed" hidden>{t("components.auth.auth-response.authentication-failed")}</h1>
  <p id="error" hidden>...</p>
  <p id="error-code" hidden>...</p>
  <p id="error-description" hidden>...</p>
  <p id="timestamp" hidden>...</p>
  <p id="correlation-id" hidden>...</p>
</header>

<script>
  import { msaAuth } from "@src/services/app";
  import { BaseResponse, TokenResponse } from "@src/services/auth";
  import { authLocalStore } from "@src/services/auth/authStore";

  const authenticating = document.getElementById("authenticating") as HTMLElement;
  const authenticationSucceed = document.getElementById("authentication-succeed") as HTMLElement;
  const authenticationFailed = document.getElementById("authentication-failed") as HTMLElement;
  const error = document.getElementById("error") as HTMLElement;
  const errorCode = document.getElementById("error-code") as HTMLElement;
  const errorDescription = document.getElementById("error-description") as HTMLElement;
  const timestamp = document.getElementById("timestamp") as HTMLElement;
  const correlationId = document.getElementById("correlation-id") as HTMLElement;

  // Functions
  const showError = function showError(response: BaseResponse): void {
    authenticating.hidden = true;
    authenticationSucceed.hidden = true;
    authenticationFailed.hidden = false;

    error.innerText = `${response.error}`;
    errorCode.innerText = `${response.errorCode}`;
    errorDescription.innerText = `${response.errorDescription}`;
    timestamp.innerText = `${response.timestamp}`;
    correlationId.innerText = `${response.correlationId}`;

    error.hidden = typeof response.error !== "string";
    errorCode.hidden = typeof response.errorCode !== "string";
    errorDescription.hidden = typeof response.errorDescription !== "string";
    timestamp.hidden = typeof response.timestamp !== "string";
    correlationId.hidden = typeof response.correlationId !== "string";
  };

  const handleAuthRedirectResponse = async function handleAuthRedirectResponse(): Promise<void> {
    const response: BaseResponse = await msaAuth.handleAuthCodeResponse();
    if (response.error) {
      showError(response);
      return;
    }

    authenticating.hidden = true;
    authenticationSucceed.hidden = false;
    authenticationFailed.hidden = true;

    const tokenResponse: TokenResponse = response as TokenResponse;
    if (tokenResponse?.stateObject?.redirectStartPage && !authLocalStore.value.debugDoNotRedirectAfterSigninCallback)
      window.location.assign(tokenResponse.stateObject.redirectStartPage);
  };

  // Init
  handleAuthRedirectResponse();
</script>
