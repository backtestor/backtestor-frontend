---
import { changeLanguage, t } from "i18next";

changeLanguage("en");
---

<!-- Auth Response Component -->
<header class="flex flex-col items-center justify-center">
  <h1 id="signing-in">{t("components.auth.auth-response.signing-in")}</h1>
  <h1 id="signin-succeed" hidden>{t("components.auth.auth-response.signin-succeed")}</h1>
  <h1 id="signin-failed" hidden>{t("components.auth.auth-response.signin-failed")}</h1>
</header>
<main class="flex flex-col items-center justify-center">
  <p id="signing-in-message">{t("components.auth.auth-response.signing-in-message")}</p>
  <p id="signin-succeed-message" hidden>{t("components.auth.auth-response.signin-succeed-message")}</p>
  <p id="signin-failed-message" hidden>{t("components.auth.auth-response.signin-failed-message")}</p>
  <p id="error" hidden>...</p>
  <p id="error-code" hidden>...</p>
  <p id="error-description" hidden>...</p>
  <p id="timestamp" hidden>...</p>
  <p id="correlation-id" hidden>...</p>
</main>

<script>
  import { defineTokenApiRequest } from "@src/services/api/auth";
  import { ApiResponse } from "@src/services/api/types";
  import { appSessionStore } from "@src/services/app/appStore";
  import { authApi } from "@src/services/app/authApi";
  import { msaAuth } from "@src/services/app/ip";
  import { ipLocalStore } from "@src/services/ip/ipStore";
  import { AuthResponse, TokenResponse } from "@src/services/ip/types";

  const signingIn = document.getElementById("signing-in") as HTMLElement;
  const signingInMessage = document.getElementById("signing-in-message") as HTMLElement;
  const signinSucceed = document.getElementById("signin-succeed") as HTMLElement;
  const signinSucceedMessage = document.getElementById("signin-succeed-message") as HTMLElement;
  const signinFailed = document.getElementById("signin-failed") as HTMLElement;
  const signinFailedMessage = document.getElementById("signin-failed-message") as HTMLElement;
  const errorElement = document.getElementById("error") as HTMLElement;
  const errorCodeElement = document.getElementById("error-code") as HTMLElement;
  const errorDescriptionElement = document.getElementById("error-description") as HTMLElement;
  const timestampElement = document.getElementById("timestamp") as HTMLElement;
  const correlationIdElement = document.getElementById("correlation-id") as HTMLElement;

  // Functions
  const showError = function showError(
    error?: string | null,
    errorCode?: string | null,
    errorDescription?: string | null,
    timestamp?: string | null,
    correlationId?: string | null,
  ): void {
    signingIn.hidden = true;
    signingInMessage.hidden = true;
    signinSucceed.hidden = true;
    signinSucceedMessage.hidden = true;
    signinFailed.hidden = false;
    signinFailedMessage.hidden = false;

    errorElement.innerText = `${error}`;
    errorCodeElement.innerText = `${errorCode}`;
    errorDescriptionElement.innerText = `${errorDescription}`;
    timestampElement.innerText = `${timestamp}`;
    correlationIdElement.innerText = `${correlationId}`;

    errorElement.hidden = typeof error !== "string";
    errorCodeElement.hidden = typeof errorCode !== "string";
    errorDescriptionElement.hidden = typeof errorDescription !== "string";
    timestampElement.hidden = typeof timestamp !== "string";
    correlationIdElement.hidden = typeof correlationId !== "string";
  };

  const handleAuthRedirectResponse = async function handleAuthRedirectResponse(): Promise<void> {
    const authResponse: AuthResponse = await msaAuth.handleAuthCodeResponse();
    if (authResponse.error) {
      showError(
        authResponse.error,
        authResponse.errorCode,
        authResponse.errorDescription,
        authResponse.timestamp,
        authResponse.correlationId,
      );
      return;
    }

    const tokenResponse: TokenResponse = authResponse as TokenResponse;
    await getApiToken(tokenResponse);
  };

  const getApiToken = async function getApiToken(tokenResponse: TokenResponse): Promise<void> {
    const apiresponse: ApiResponse = await authApi.getToken(
      defineTokenApiRequest(
        tokenResponse.idToken as string,
        appSessionStore.value.sessionId,
        tokenResponse.correlationId as string,
      ),
    );
    if (apiresponse.error) {
      showError(apiresponse.error.message, null, null, apiresponse.executedAtUtc, apiresponse.correlationId);
      return;
    }

    signingIn.hidden = true;
    signingInMessage.hidden = true;
    signinSucceed.hidden = false;
    signinSucceedMessage.hidden = false;
    signinFailed.hidden = true;
    signinFailedMessage.hidden = true;

    if (tokenResponse?.stateObject?.redirectStartPage && !ipLocalStore.value.debugDoNotRedirectAfterSigninCallback)
      window.location.assign(tokenResponse.stateObject.redirectStartPage);
  };

  // Init
  await handleAuthRedirectResponse();
</script>
